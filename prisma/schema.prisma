generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      String   @default("STANDARD")
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions     Transaction[]
  maintenanceLogs  MaintenanceLog[]
  assignedAssets   Asset[]
}

model Asset {
  id                String    @id @default(uuid())
  name              String
  type              String
  serialNumber      String    @unique
  barcode           String    @unique
  status            String    @default("AVAILABLE")
  purchaseDate      DateTime
  warrantyExpiration DateTime?
  lastMaintenance   DateTime?
  nextMaintenance   DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  location          Location     @relation(fields: [locationId], references: [id])
  locationId        String
  assignedTo        User?        @relation(fields: [assignedToId], references: [id])
  assignedToId      String?
  project           Project?     @relation(fields: [projectId], references: [id])
  projectId         String?
  transactions      Transaction[]
  maintenanceLogs   MaintenanceLog[]
}

model Location {
  id              String    @id @default(uuid())
  name            String
  type            String
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  parentLocation  Location?  @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  parentLocationId String?
  childLocations  Location[] @relation("LocationHierarchy")
  assets          Asset[]
  consumables     Consumable[]
}

model Transaction {
  id        String   @id @default(uuid())
  type      String
  dueDate   DateTime?
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model MaintenanceLog {
  id                 String   @id @default(uuid())
  description        String
  cost              Float?
  date              DateTime
  nextMaintenanceDate DateTime?
  createdAt         DateTime @default(now())

  // Relations
  asset             Asset    @relation(fields: [assetId], references: [id])
  assetId           String
  performedBy       User     @relation(fields: [performedById], references: [id])
  performedById     String
}

model Consumable {
  id            String   @id @default(uuid())
  name          String
  quantity      Int      @default(0)
  reorderLevel  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  location      Location @relation(fields: [locationId], references: [id])
  locationId    String
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String    @default("PLANNED")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  assets      Asset[]
} 