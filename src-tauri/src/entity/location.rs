//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "location")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub r#type: String,
    pub description: Option<String>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "parentLocationId")]
    pub parent_location_id: Option<String>,
    pub order: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::asset::Entity")]
    Asset,
    #[sea_orm(has_many = "super::consumable::Entity")]
    Consumable,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentLocationId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    SelfRef,
}

impl Related<super::asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Asset.def()
    }
}

impl Related<super::consumable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Consumable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
