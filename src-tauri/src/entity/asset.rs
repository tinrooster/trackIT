//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "asset")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    #[sea_orm(column_name = "assignedToId")]
    pub assigned_to_id: Option<String>,
    #[sea_orm(unique)]
    pub barcode: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "lastMaintenance")]
    pub last_maintenance: Option<DateTime>,
    #[sea_orm(column_name = "locationId")]
    pub location_id: String,
    #[sea_orm(column_name = "nextMaintenance")]
    pub next_maintenance: Option<DateTime>,
    pub notes: Option<String>,
    #[sea_orm(column_name = "projectId")]
    pub project_id: Option<String>,
    #[sea_orm(column_name = "purchaseDate")]
    pub purchase_date: DateTime,
    #[sea_orm(column_name = "serialNumber", unique)]
    pub serial_number: String,
    pub status: String,
    pub r#type: String,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "warrantyExpiration")]
    pub warranty_expiration: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::location::Entity",
        from = "Column::LocationId",
        to = "super::location::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Location,
    #[sea_orm(has_many = "super::maintenancelog::Entity")]
    Maintenancelog,
    #[sea_orm(
        belongs_to = "super::project::Entity",
        from = "Column::ProjectId",
        to = "super::project::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Project,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::AssignedToId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User,
}

impl Related<super::location::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Location.def()
    }
}

impl Related<super::maintenancelog::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Maintenancelog.def()
    }
}

impl Related<super::project::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Project.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
